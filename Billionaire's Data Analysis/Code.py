# -*- coding: utf-8 -*-
"""FinalProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ps-HwDsxCDAM5WQtz1a8Mc_li6FOraTV
"""

# Billionare Data Analysis
# List of Variables: Age, Self Made, Industry, Region, Final Worth
import pandas as pd
import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
from statsmodels.stats.anova import anova_lm
df = pd.read_csv('Billionaires Statistics Dataset.csv')
df

# EDA
sns.histplot(data = df, x= "finalWorth", bins = 30)
plt.show()

df['country'].value_counts()

df['residenceStateRegion'].value_counts()

us = df.loc[df['country']=='United States']
us

# Causal Relationships
# top 5 industries
us['industries'].value_counts()
us5 = us.loc[(us['industries']== 'Finance & Investments') | (us['industries']== 'Technology') | (us['industries']== 'Food & Beverage') | (us['industries']== 'Fashion & Retail') | (us['industries']== 'Real Estate')]
newus = us5.loc[us5['residenceStateRegion'] != "U.S. Territories"]
newus
ax = sns.barplot(data = newus, x = 'industries', y = 'finalWorth')
ax.set_title("Top 5 Industry Average Final Worth")
ax.set_xlabel('Industry')
ax.set_ylabel('Billionaire Final Worth')
plt.xticks(rotation=90)
plt.show()

ax = sns.barplot(data = newus, x = 'selfMade', y = 'finalWorth')
ax.set_title("Top 5 Industry Final Worth Self Made Vs Not")
plt.show()
stats.linregress(newus['finalWorth'], newus['selfMade'])

ax = sns.lineplot(data = newus, x = 'age', y = 'finalWorth')
ax.set_title("Final Worth Age")
ax.set_xlabel('Age')
ax.set_ylabel('Billionaire Final Worth')
plt.show()
stats.linregress(newus['finalWorth'], newus['age'])

#marix

#change industry to numeric
category_mapping = {'Finance & Investments': 1, 'Technology': 2, 'Food & Beverage': 3, 'Fashion & Retail': 4, 'Real Estate': 5}
newus['Industry_Numeric'] = newus['industries'].replace(category_mapping)

newus['FI'] = 0
newus['Tech'] = 0
newus['FB'] = 0
newus['FR'] = 0
newus['RE'] = 0

newus.loc[newus['industries'] == 'Finance & Investments', 'FI'] = 1
newus.loc[newus['industries'] == 'Technology', 'Tech'] = 1
newus.loc[newus['industries'] == 'Food & Beverage', 'FB'] = 1
newus.loc[newus['industries'] == 'Fashion & Retail', 'FR'] = 1
newus.loc[newus['industries'] == 'Real Estate', 'RE'] = 1


category_mapping2 = {'West': 1, 'Midwest': 2, 'South': 3, 'Northeast': 4}
newus['Region_Numeric'] = newus['residenceStateRegion'].replace(category_mapping2)

newus['West'] = 0
newus['Midwest'] = 0
newus['South'] = 0
newus['Northeast'] = 0

newus.loc[newus['residenceStateRegion'] == 'West', 'West'] = 1
newus.loc[newus['residenceStateRegion'] == 'Midwest', 'Midwest'] = 1
newus.loc[newus['residenceStateRegion'] == 'South', 'South'] = 1
newus.loc[newus['residenceStateRegion'] == 'Northeast', 'Northeast'] = 1

newus['self'] = 0

newus.loc[newus['selfMade'] == True, 'self'] = 1
newus

# Scatter matrix to visualize relationships
#sns.set(style="scatter")
sns.pairplot(newus[['finalWorth', 'age', 'selfMade', 'Region_Numeric', 'Industry_Numeric']])
plt.show()

ax = sns.barplot(data = newus, x = 'residenceStateRegion', y = 'finalWorth')
ax.set_title("Top 5 Industry Final Worth Region")
ax.set_xlabel('Region of Residence')
ax.set_ylabel('Billionaire Final Worth')
plt.show()

ax = sns.barplot(data=newus, x='gender', y='finalWorth')
ax.set_title("Billionaires' Final Worth by Gender")
plt.show()

ax = sns.histplot(data = newus, x = 'industries', y = 'residenceStateRegion')
ax.set_title("Top 5 Industry by Region")
ax.set_xlabel('Industry')
ax.set_ylabel('Region of Residence')
plt.xticks(rotation=45)
plt.show()

ax = sns.lineplot(data = newus, x = 'industries', y = 'selfMade')
ax.set_title("Top 5 Industry and Self Made")
plt.xticks(rotation=90)
plt.show()

# Individual Linear Regression

# Industry Regressions
# pval = 0.02, corr = 0.102, slope = 2958.25 THIS IS ONLY ONCE SIGNIFICANT
stats.linregress(newus['Tech'], newus['finalWorth'])

# pval = 0.1, corr = 0.072, slope = 2859.37
stats.linregress(newus['FR'], newus['finalWorth'])

# pval = 0.16, corr = 0.061, slope = -1646.17
stats.linregress(newus['FI'], newus['finalWorth'])

# pval = 0.2, corr = -0.057, slope = -2093.7
stats.linregress(newus['FB'], newus['finalWorth'])

# pval = 0.13, corr = -0.07, slope = -2857.81
stats.linregress(newus['RE'], newus['finalWorth'])

# Region Regressions
# pval = 0.23, corr = 0.0521, slope = 21396.78
stats.linregress(newus['West'], newus['finalWorth'])

# pval = 0.77, corr = 0.013, slope = 569.97
stats.linregress(newus['Midwest'], newus['finalWorth'])

# pval = 0.78, corr = 0.012, slope = 362.78
stats.linregress(newus['South'], newus['finalWorth'])

# pval = 0.111, corr = -0.07, slope = -2013.98
stats.linregress(newus['Northeast'], newus['finalWorth'])

# Self Made Regression
# pval = 0.84, corr = -0.01, slope = -257.485
stats.linregress(newus['self'], newus['finalWorth'])

# Age Regression
# pval = 0.11, corr = 0.07, slope = 63.456
stats.linregress(newus['age'], newus['finalWorth'])

# VARIABLE ON VARIABLE REGRESSION
# pval = 0.00, corr = 0.4137, slope = 0.45
stats.linregress(newus['Tech'], newus['West'])

# pval = 0.00, corr = 0.331, slope = 0.31
stats.linregress(newus['FI'], newus['Northeast'])

# Multiple Regression Analysis

## ALL VARIABLES
X = newus[['age','self', 'FI', 'Tech', 'FB', 'FR', 'RE', 'West', 'Midwest', 'South', 'Northeast']]
X = sm.add_constant(X)
y = newus['finalWorth']
regout = sm.OLS(y, X).fit()
regout.summary()

## ROUTE 1

# REMOVE SELF MADE
X = newus[['age', 'FI', 'Tech', 'FB', 'FR', 'RE', 'West', 'Midwest', 'South', 'Northeast']]
X = sm.add_constant(X)
y = newus['finalWorth']
regout = sm.OLS(y, X).fit()
regout.summary()

# ONLY KEEP BELOW 0.1 ALPHA
X = newus[['age','Tech', 'FB', 'RE']]
X = sm.add_constant(X)
y = newus['finalWorth']
regout = sm.OLS(y, X).fit()
regout.summary()

# ADD ROUTE 2 INTERACTION AND ALL INDUSTRIES
newus['TECH & West'] = newus['Tech'] * newus['West']
X = newus[['age','Tech', 'FB', 'RE','FR', 'FI', 'West', 'TECH & West']]
X = sm.add_constant(X)
y = newus['finalWorth']
regout = sm.OLS(y, X).fit()
regout.summary()

# REMOVE FB, RE, AND FI**
X = newus[['age','Tech', 'FR', 'West', 'TECH & West']]
X = sm.add_constant(X)
y = newus['finalWorth']
regout = sm.OLS(y, X).fit()
regout.summary()

# ADD INTERACTION BETWEEN TECH AND SELF
newus['self & Tech'] = newus['Tech'] * newus['self']
X = newus[['age', 'self', 'Tech', 'FR', 'West', 'TECH & West', 'self & Tech']]
X = sm.add_constant(X)
y = newus['finalWorth']
regout = sm.OLS(y, X).fit()
regout.summary()

# ADD INTERACTION BETWEEN FI AND NORTHEAST
newus['FI & Northeast'] = newus['Tech'] * newus['self']
X = newus[['age','Tech','FI', 'FR', 'West', 'Northeast', 'TECH & West', 'FI & Northeast']]
X = sm.add_constant(X)
y = newus['finalWorth']
regout = sm.OLS(y, X).fit()
regout.summary()

# ROUTE 2

# INTERACTIONS WITH TECH AND WEST
newus['FI & Northeast'] = newus['FI'] * newus['Northeast']
newus['TECH & West'] = newus['Tech'] * newus['West']
X = newus[['age','self','FI', 'Tech', 'FB', 'FR', 'RE', 'West', 'Midwest', 'South', 'Northeast', 'TECH & West']]
X = sm.add_constant(X)
y = newus['finalWorth']
regout = sm.OLS(y, X).fit()
regout.summary()

# INTERACTIONS WITH TECH AND SELF
newus['self & Tech'] = newus['Tech'] * newus['self']
X = newus[['age','self', 'FI', 'Tech', 'FB', 'FR', 'RE', 'West', 'Midwest', 'South', 'Northeast', 'TECH & West', 'self & Tech']]
X = sm.add_constant(X)
y = newus['finalWorth']
regout = sm.OLS(y, X).fit()
regout.summary()

# INTERACTIONS WITH FI AND NORTHEAST
newus['FI & Northeast'] = newus['Tech'] * newus['self']
X = newus[['age','self','FI', 'Tech', 'FB', 'FR', 'RE', 'West', 'Midwest', 'South', 'Northeast', 'FI & Northeast']]
X = sm.add_constant(X)
y = newus['finalWorth']
regout = sm.OLS(y, X).fit()
regout.summary()

# Residual Analysis
residuals = regout.resid
sns.histplot(residuals, bins=30)
plt.title("Residuals Distribution")
plt.show()

# Normality Test
_, p_value = stats.shapiro(residuals)
print(f"Shapiro-Wilk p-value: {p_value}")

# Check for Multicollinearity
correlation_matrix = newus[['age', 'FI', 'Tech', 'FB', 'FR', 'RE', 'West', 'Midwest', 'South', 'Northeast','finalWorth']].corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title("Correlation Matrix")
print(correlation_matrix)
plt.show()

# Outlier Detection using Cook's Distance
influence = regout.get_influence()
cook_distance = influence.cooks_distance[0]

# Identify influential observations (those with Cook's Distance > 4/n)
influential_obs = pd.Series(cook_distance, name="Cook's Distance", index=newus.index)

# Filter observations with Cook's Distance > 4/n
influential_obs = influential_obs[influential_obs > 4 / len(cook_distance)]

# display the influential observations
influential_obs

#BRUTE FORCE
import itertools

# Function to perform brute-force variable selection
def brute_force_selection(X, y, criterion='adj_r2'):
    best_score = -float('inf')
    best_features = None

    # Iterate through all possible combinations of features
    for r in range(1, len(X.columns) + 1):
        for combo in itertools.combinations(X.columns, r):
            model = sm.OLS(y, sm.add_constant(X[list(combo)])).fit()


            if criterion == 'adj_r2':
                score = model.rsquared_adj


            if score > best_score:
                best_score = score
                best_features = list(combo)

    return best_features

# Variables for brute-force selection
X_brute = newus[['age', 'self', 'FI', 'Tech', 'FB', 'FR', 'RE', 'West', 'Midwest', 'South', 'Northeast']]
y_brute = newus['finalWorth']

# brute-force selection
selected_features_brute = brute_force_selection(X_brute, y_brute, criterion='adj_r2')
print("Selected Features (Brute Force):", selected_features_brute)

# Fit the final model with the selected features
X_final = sm.add_constant(X_brute[selected_features_brute])
regout_final = sm.OLS(y_brute, X_final).fit()
regout_final.summary()

# Model Process

# Brute Force
X = newus[['age','Tech', 'FI', 'FR']]
X = sm.add_constant(X)
y = newus['finalWorth']
regout = sm.OLS(y, X).fit()
regout.summary()

# ADD WEST
X = newus[['age','Tech', 'FR', 'West']]
X = sm.add_constant(X)
y = newus['finalWorth']
regout = sm.OLS(y, X).fit()
regout.summary()


# Add Tech and West Interaction
X = newus[['age','Tech', 'FR', 'West', 'TECH & West']]
X = sm.add_constant(X)
y = newus['finalWorth']
regout = sm.OLS(y, X).fit()
regout.summary()

# Add FI and Northeast
X = newus[['age','Tech', 'FR', 'West', 'TECH & West', 'FI', 'Northeast']]
X = sm.add_constant(X)
y = newus['finalWorth']
regout = sm.OLS(y, X).fit()
regout.summary()

# Add FI and Northeast Interaction
X = newus[['age','Tech', 'FR', 'West', 'TECH & West', 'FI', 'Northeast', 'FI & Northeast']]
X = sm.add_constant(X)
y = newus['finalWorth']
regout = sm.OLS(y, X).fit()
regout.summary()

from statsmodels.stats.outliers_influence import variance_inflation_factor


X = newus[['age', 'Tech', 'FR', 'West', 'TECH & West']]
X = sm.add_constant(X)
y = newus['finalWorth']

# Fit the OLS model
regout = sm.OLS(y, X).fit()

# Calculate VIF for each independent variable
vif_data = pd.DataFrame()
vif_data["Variable"] = X.columns
vif_data["VIF"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]

# Display the OLS summary
print(regout.summary())

# Display the VIF results
print("\nVIF Results:")
print(vif_data)

X = newus[['age', 'Tech', 'FI', 'FR']]
X = sm.add_constant(X)
y = newus['finalWorth']

regout = sm.OLS(y, X).fit()

# Calculate VIF for each independent variable
vif_data = pd.DataFrame()
vif_data["Variable"] = X.columns
vif_data["VIF"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]

# Display the OLS summary
print(regout.summary())

# Display the VIF results
print("\nVIF Results:")
print(vif_data)